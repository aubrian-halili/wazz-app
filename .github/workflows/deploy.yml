name: Deploy Wazz App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: wazz-backend
  FRONTEND_S3_BUCKET: wazz-frontend-${{ github.sha }}

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      app-runner-arn: ${{ steps.deploy-infra.outputs.app-runner-arn }}
      s3-bucket: ${{ steps.deploy-infra.outputs.s3-bucket }}
      cloudfront-distribution: ${{ steps.deploy-infra.outputs.cloudfront-distribution }}
      ecr-repository: ${{ steps.deploy-infra.outputs.ecr-repository }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy infrastructure
        id: deploy-infra
        run: |
          # Deploy infrastructure stack
          aws cloudformation deploy \
            --template-file infrastructure/infrastructure.yaml \
            --stack-name wazz-app-infrastructure \
            --parameter-overrides \
              Environment=production \
              ProjectName=wazz-app \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }}

          # Get stack outputs
          APP_RUNNER_ARN=$(aws cloudformation describe-stacks \
            --stack-name wazz-app-infrastructure \
            --query 'Stacks[0].Outputs[?OutputKey==`AppRunnerServiceArn`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})

          S3_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name wazz-app-infrastructure \
            --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})

          CLOUDFRONT_DISTRIBUTION=$(aws cloudformation describe-stacks \
            --stack-name wazz-app-infrastructure \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})

          ECR_REPOSITORY=$(aws cloudformation describe-stacks \
            --stack-name wazz-app-infrastructure \
            --query 'Stacks[0].Outputs[?OutputKey==`ECRRepository`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})

          echo "app-runner-arn=$APP_RUNNER_ARN" >> $GITHUB_OUTPUT
          echo "s3-bucket=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "cloudfront-distribution=$CLOUDFRONT_DISTRIBUTION" >> $GITHUB_OUTPUT
          echo "ecr-repository=$ECR_REPOSITORY" >> $GITHUB_OUTPUT

  build-and-deploy-backend:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        run: |
          cd backend

          # Build Docker image
          docker build -t ${{ needs.deploy-infrastructure.outputs.ecr-repository }}:latest .
          docker tag ${{ needs.deploy-infrastructure.outputs.ecr-repository }}:latest ${{ needs.deploy-infrastructure.outputs.ecr-repository }}:${{ github.sha }}

          # Push to ECR
          docker push ${{ needs.deploy-infrastructure.outputs.ecr-repository }}:latest
          docker push ${{ needs.deploy-infrastructure.outputs.ecr-repository }}:${{ github.sha }}

      - name: Update App Runner service
        run: |
          # Get current App Runner service configuration
          SERVICE_ARN="${{ needs.deploy-infrastructure.outputs.app-runner-arn }}"

          # Create new deployment
          aws apprunner start-deployment \
            --service-arn $SERVICE_ARN \
            --region ${{ env.AWS_REGION }}

  build-and-deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          # Get App Runner URL from CloudFormation outputs
          APP_RUNNER_URL=$(aws cloudformation describe-stacks \
            --stack-name wazz-app-infrastructure \
            --query 'Stacks[0].Outputs[?OutputKey==`AppRunnerServiceUrl`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})

          # Set environment variables for build
          echo "VITE_BACKEND_URL=${APP_RUNNER_URL}/graphql" > .env.production
          echo "VITE_NODE_ENV=production" >> .env.production
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        run: |
          cd frontend
          aws s3 sync dist/ s3://${{ needs.deploy-infrastructure.outputs.s3-bucket }} --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.deploy-infrastructure.outputs.cloudfront-distribution }} \
            --paths "/*"

  test-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Run tests
        run: |
          cd backend
          npm test || echo "No tests defined, skipping..."

      - name: Type check
        run: |
          cd backend
          npx tsc --noEmit

  test-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Lint
        run: |
          cd frontend
          npm run lint

      - name: Type check
        run: |
          cd frontend
          npm run build
